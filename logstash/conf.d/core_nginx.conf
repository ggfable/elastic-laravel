filter {
    if [type] == "nginx_access" {
        grok {
            match => { "message" => "%{IPORHOST:remote_ip} - %{DATA:virt_host} [%{HTTPDATE:access_time}] \"%{WORD:http_method} %{DATA:url} HTTP/%{NUMBER:http_version}\" request_length=%{INT:request_length} status=%{INT:status} bytes_sent=%{INT:bytes_sent} body_bytes_sent=%{NUMBER:body_bytes_sent} referer=%{DATA:referer} user_agent=\"%{DATA:user_agent}\" upstream_status=%{DATA:upstream_status} request_time=%{NUMBER:request_time} upstream_response_time=%{DATA:upstream_response_time} upstream_connect_time=%{DATA:upstream_connect_time} upstream_header_time=%{DATA:upstream_header_time}" }
            overwrite => [ "message" ]
        }
        mutate {
            convert => ["bytes_sent", "integer"]
            convert => ["body_bytes_sent", "integer"]
            convert => ["request_length", "integer"]
            convert => ["request_time", "float"]
            convert => ["upstream_status", "integer"]
            convert => ["upstream_response_time", "float"]
            convert => ["upstream_connect_time", "float"]
            convert => ["upstream_header_time", "float"]
        }
        ruby {
            code => 'event.set("request_time_ms",event.get("request_time")*1000)'
        }
        date {
            match => [ "access_time" , "dd/MMM/YYYY:HH:mm:ss Z" ]
            remove_field => [ "access_time" ]
        }
        geoip {
            source => "remote_ip"
            target => "geoip"
            add_tag => [ "nginx-geoip" ]
        }
    }
}